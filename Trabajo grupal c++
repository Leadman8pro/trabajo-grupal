
#include <iostream>
#include <string>
#include <limits> // Para numeric_limits
using namespace std;

// Clase Libro
class Libro {
private:
    string titulo;
    int id;

public:
    Libro(const string& titulo = "", int id = 0) : titulo(titulo), id(id) {
        if (!titulo.empty()) {
            cout << "Libro '" << titulo << "' creado.\n";
        }
    }

    int getId() const { return id; }
    string getTitulo() const { return titulo; }
    void setTitulo(const string& nuevoTitulo) { titulo = nuevoTitulo; }
};

// Clase Estante
class Estante {
private:
    int id;
    Libro libro1, libro2; // Máximo 2 libros
    int contadorLibros = 0;

public:
    Estante(int id = 0) : id(id) {
        cout << "Estante " << id << " creado.\n";
    }

    bool agregarLibro(const Libro& libro) {
        if (contadorLibros == 0) {
            libro1 = libro;
            contadorLibros++;
            return true;
        } else if (contadorLibros == 1) {
            libro2 = libro;
            contadorLibros++;
            return true;
        }
        cout << "Estante lleno. No se pueden agregar más libros.\n";
        return false;
    }

    void removerLibro(int idLibro) {
        if (libro1.getId() == idLibro) {
            cout << "Libro '" << libro1.getTitulo() << "' removido del estante " << id << endl;
            libro1 = Libro(); 
            contadorLibros--;
        } else if (libro2.getId() == idLibro) {
            cout << "Libro '" << libro2.getTitulo() << "' removido del estante " << id << endl;
            libro2 = Libro(); 
            contadorLibros--;
        } else {
            cout << "Libro no encontrado en el estante.\n";
        }
    }

    void mostrarLibros() const {
        if (contadorLibros > 0) cout << "Libro 1: " << libro1.getTitulo() << "\n";
        if (contadorLibros > 1) cout << "Libro 2: " << libro2.getTitulo() << "\n";
        if (contadorLibros == 0) cout << "No hay libros en este estante.\n";
    }

    int getId() const { return id; }
};

// Clase Biblioteca
class Biblioteca {
private:
    Estante estante1, estante2; // Solo dos estantes para simplificar

public:
    bool agregarEstante(Estante& estante) {
        if (estante1.getId() == 0) {
            estante1 = estante;
            return true;
        } else if (estante2.getId() == 0) {
            estante2 = estante;
            return true;
        }
        cout << "No se pueden agregar más estantes.\n";
        return false;
    }

    void removerEstante(int id) {
        if (estante1.getId() == id) {
            cout << "Estante " << estante1.getId() << " removido.\n";
            estante1 = Estante(); 
        } else if (estante2.getId() == id) {
            cout << "Estante " << estante2.getId() << " removido.\n";
            estante2 = Estante(); 
        } else {
            cout << "Estante no encontrado.\n";
        }
    }

    void mostrarEstantes() const {
        if (estante1.getId() != 0) {
            cout << "Estante 1 ID: " << estante1.getId() << "\n";
            estante1.mostrarLibros();
        }
        if (estante2.getId() != 0) {
            cout << "Estante 2 ID: " << estante2.getId() << "\n";
            estante2.mostrarLibros();
        }
        if (estante1.getId() == 0 && estante2.getId() == 0) {
            cout << "No hay estantes en la biblioteca.\n";
        }
    }

    Estante& obtenerEstante(int id) {
        if (id == 1) return estante1;
        else if (id == 2) return estante2;
        else throw invalid_argument("ID de estante inválido.");
    }
};

// Función para agregar libros
void agregarLibro(Biblioteca& biblioteca) {
    string titulo;
    int idEstante;

    cout << "Ingrese el título del libro: ";
    cin.ignore();
    getline(cin, titulo);

    cout << "Ingrese el ID del estante (1 o 2): ";
    cin >> idEstante;

    if (cin.fail() || (idEstante != 1 && idEstante != 2)) {
        cout << "Entrada inválida. Intente nuevamente.\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        return;
    }

    Libro nuevoLibro(titulo);
    try {
        Estante& estante = biblioteca.obtenerEstante(idEstante);
        if (!estante.agregarLibro(nuevoLibro)) {
            cout << "No se pudo agregar el libro al estante " << idEstante << ". Está lleno.\n";
        }
    } catch (const exception& e) {
        cout << e.what() << endl;
    }
}

// Función para mostrar los estantes
void mostrarEstantes(Biblioteca& biblioteca) {
    cout << "--- Contenido de la Biblioteca ---\n";
    biblioteca.mostrarEstantes();
    return;
}

// Menú principal
void menu(Biblioteca& biblioteca) {
    int opcion;

    do {
        cout << "\n--- Menude Biblioteca ---\n";
        cout << "1. Agregar Libro\n";
        cout << "2. Mostrar Estantes\n";
        cout << "3. Salir\n";
        cout << "Seleccione una opción: ";
        cin >> opcion;

        if (cin.fail()) { // Si la entrada no es un número
            cout << "Entrada invalida. Intente nuevamente.\n";
            cin.clear(); // Limpiar el estado de error
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Descartar entrada inválida
            continue;
        }

        switch (opcion) {
        case 1:
            agregarLibro(biblioteca);
            break;
        case 2:
            mostrarEstantes(biblioteca);
            break;
        case 3:
            cout << "Saliendo del sistema...\n";
            break;
        default:
            cout << "Opción inválida. Intente nuevamente.\n";
        }
    } while (opcion != 3);
}

// Función principal
int main() {
    Biblioteca biblioteca;
    Estante estante1(1), estante2(2);

    // Agregar estantes a la biblioteca
    biblioteca.agregarEstante(estante1);
    biblioteca.agregarEstante(estante2);

    // Llamar al menú
    menu(biblioteca);

    return 0;
}
